DAY 4 ASSIGNMENT :

Q1.write a program to break the below loop by using timeout?
package main
func main() {
for {
}
}

Ans :

package main

import (
	"fmt"
	"time"
)

func main() {
	timeout := time.After(time.Second * 5)
	for {
		select {
		case <-timeout:
			fmt.Println("timeout")
			return
		}
	}
}




Q2.
- define a main() func
- define an array int[]
a. print the array
- create a slice : any range
b. slice the array : return the 1st element of the slice
c. extend the length of slice
d. drop the first 2 elements from the slice
e. print the slice

Ans: 

package main

import "fmt"

func main() {

	
	arr := [4]int{1,2,3,4}

	fmt.Println("Array:", arr)

	
	slice := arr[:2]

	fmt.Println("Slice:", slice[0])
	
	slice = arr[:3]
	
	fmt.Println("Slice:", slice)
	
	slice = arr[2:3]
	
	fmt.Println(slice, len(slice), cap(slice))

	
}


3.Read about pointers?

Pointers
Go has pointers. A pointer holds the memory address of a value.

The type *T is a pointer to a T value. Its zero value is nil.

var p *int
The & operator generates a pointer to its operand.

i := 42
p = &i
The * operator denotes the pointer's underlying value.

fmt.Println(*p) // read i through the pointer p
*p = 21         // set i through the pointer p
This is known as "dereferencing" or "indirecting".

Unlike C, Go has no pointer arithmetic.

/* Found this concept from do.dev site*/